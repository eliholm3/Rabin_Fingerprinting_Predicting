{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "35569811-2998-4b20-afd7-f97430e1848b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10000, 1)\n",
      "(10000,)\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "from torch.utils.data import DataLoader, TensorDataset, random_split\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "df = pd.read_csv(\"output_32.csv\")\n",
    "X = df[\"data\"].values.astype(\"float32\").reshape(-1, 1)\n",
    "X = (X - X.mean()) / X.std()\n",
    "y = df[\"label\"].values.astype(\"float32\")\n",
    "\n",
    "print(X.shape)\n",
    "print(y.shape)\n",
    "\n",
    "X_tensor = torch.tensor(X)\n",
    "y_tensor = torch.tensor(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "61b59d9c-6491-4873-a7ff-8547e2781fd3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1: Validation Accuracy = 0.7840\n",
      "Confusion Matrix: TP=11, FP=378, FN=54, TN=1557\n",
      "Epoch 2: Validation Accuracy = 0.7510\n",
      "Confusion Matrix: TP=12, FP=445, FN=53, TN=1490\n",
      "Epoch 3: Validation Accuracy = 0.9675\n",
      "Confusion Matrix: TP=0, FP=0, FN=65, TN=1935\n",
      "Epoch 4: Validation Accuracy = 0.2015\n",
      "Confusion Matrix: TP=50, FP=1582, FN=15, TN=353\n",
      "Epoch 5: Validation Accuracy = 0.9675\n",
      "Confusion Matrix: TP=0, FP=0, FN=65, TN=1935\n",
      "Epoch 6: Validation Accuracy = 0.4980\n",
      "Confusion Matrix: TP=30, FP=969, FN=35, TN=966\n",
      "Epoch 7: Validation Accuracy = 0.6315\n",
      "Confusion Matrix: TP=23, FP=695, FN=42, TN=1240\n",
      "Epoch 8: Validation Accuracy = 0.9040\n",
      "Confusion Matrix: TP=3, FP=130, FN=62, TN=1805\n",
      "Epoch 9: Validation Accuracy = 0.3905\n",
      "Confusion Matrix: TP=43, FP=1197, FN=22, TN=738\n",
      "Epoch 10: Validation Accuracy = 0.4565\n",
      "Confusion Matrix: TP=39, FP=1061, FN=26, TN=874\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "from torch.utils.data import DataLoader, TensorDataset, random_split\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "# Load dataset\n",
    "df = pd.read_csv(\"output_32.csv\")\n",
    "X = np.stack(df[\"data\"].values).astype(\"float32\")  # Shape: (N, 64) or similar\n",
    "y = df[\"label\"].values.astype(\"float32\")\n",
    "\n",
    "# Normalize input\n",
    "X = (X - X.mean()) / X.std()\n",
    "\n",
    "# Reshape X for input shape (N, 1) if using only one feature\n",
    "X_tensor = torch.tensor(X).view(-1, 1)  # Adjust this if you're using more features\n",
    "y_tensor = torch.tensor(y)\n",
    "\n",
    "# Create Dataset and DataLoader\n",
    "dataset = TensorDataset(X_tensor, y_tensor)\n",
    "train_size = int(0.8 * len(dataset))\n",
    "val_size = len(dataset) - train_size\n",
    "train_ds, val_ds = random_split(dataset, [train_size, val_size])\n",
    "\n",
    "train_loader = DataLoader(train_ds, batch_size=64, shuffle=True)\n",
    "val_loader = DataLoader(val_ds, batch_size=64)\n",
    "\n",
    "# Define neural network (sigmoid function is not output since the 0 vs 1 has a ratio of 31:1)\n",
    "class ChunkBoundaryNet(nn.Module):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.net = nn.Sequential(\n",
    "            nn.Linear(1, 32),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(32, 16),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(16, 1)\n",
    "        )\n",
    "    def forward(self, x):\n",
    "        return self.net(x)\n",
    "\n",
    "# Setup model and optimizer\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "model = ChunkBoundaryNet().to(device)\n",
    "\n",
    "# Handle class imbalance using pos_weight\n",
    "neg = (y == 0).sum()\n",
    "pos = (y == 1).sum()\n",
    "pos_weight = torch.tensor([neg / pos], dtype=torch.float32).to(device)\n",
    "\n",
    "# Use BCEWithLogitsLoss (expects raw logits, not sigmoid output)\n",
    "loss_fn = nn.BCEWithLogitsLoss(pos_weight=pos_weight)\n",
    "optimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n",
    "\n",
    "# Training loop\n",
    "num_epochs = 10\n",
    "for epoch in range(num_epochs):\n",
    "    model.train()\n",
    "    for xb, yb in train_loader:\n",
    "        xb, yb = xb.to(device), yb.to(device).unsqueeze(1)\n",
    "        logits = model(xb)  # raw logits\n",
    "        loss = loss_fn(logits, yb)\n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "    # Evaluation\n",
    "    model.eval()\n",
    "    total = 0\n",
    "    correct = 0\n",
    "    all_preds = []\n",
    "    all_labels = []\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for xb, yb in val_loader:\n",
    "            xb = xb.to(device)\n",
    "            yb = yb.to(device).unsqueeze(1)\n",
    "            logits = model(xb)\n",
    "            probs = torch.sigmoid(logits)\n",
    "            predicted = (probs > 0.5).float()\n",
    "\n",
    "            all_preds.extend(predicted.cpu().numpy())\n",
    "            all_labels.extend(yb.cpu().numpy())\n",
    "\n",
    "            correct += (predicted == yb).sum().item()\n",
    "            total += yb.size(0)\n",
    "\n",
    "    acc = correct / total\n",
    "    cm = confusion_matrix(all_labels, all_preds, labels=[0, 1])\n",
    "    tn, fp, fn, tp = cm.ravel() if cm.size == 4 else (0, 0, 0, 0)\n",
    "\n",
    "    print(f\"Epoch {epoch+1}: Validation Accuracy = {acc:.4f}\")\n",
    "    print(f\"Confusion Matrix: TP={tp}, FP={fp}, FN={fn}, TN={tn}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "87eb40b1-f0ec-41b7-9089-1771ead977e0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
